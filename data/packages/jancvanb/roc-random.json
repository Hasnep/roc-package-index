{
  "documentation_url": null,
  "download_url": "https://github.com/JanCVanB/roc-random/releases/download/v0.1.3/YfNiz9trKhsdZ7w_MdzfxW0U01Pw2iSzbrRfcIXhYPM.tar.br",
  "homepage_url": "https://github.com/jancvanb/roc-random",
  "modules": [
    {
      "definitions": [
        {
          "description": "A psuedorandom value generator",
          "is_a": "type",
          "name": "Generator",
          "type_annotation": null
        },
        {
          "description": "A psuedorandom value, paired with its [Generator]'s output state (for chaining)",
          "is_a": "type",
          "name": "Generation",
          "type_annotation": null
        },
        {
          "description": "Internal state for [Generator]s",
          "is_a": "type",
          "name": "State",
          "type_annotation": null
        },
        {
          "description": "Construct a \"seed\"\n\nA \"seed\" is an initial [State] for [Generator]s.\n\nThis is an alias for [seed32].",
          "is_a": "value",
          "name": "seed",
          "type_annotation": "U32 -> State U32"
        },
        {
          "description": "Construct a specific \"variant\" of a \"seed\"\n\nA \"seed\" is an initial [State] for [Generator]s.\n\nA \"variant\" is a [State] that specifies a `c.updateIncrement` constant,\nto produce a sequence of internal `value`s that shares no consecutive pairs\nwith other variants of the same [State].\n\nOdd numbers are recommended for the update increment,\nto double the repetition period of sequences (by hitting odd values).\n\nThis is an alias for [seed32Variant].",
          "is_a": "value",
          "name": "seedVariant",
          "type_annotation": "U32, U32 -> State U32"
        },
        {
          "description": "Construct an initial [State] from 8 bits of noise",
          "is_a": "value",
          "name": "seed8",
          "type_annotation": "U8 -> State U8"
        },
        {
          "description": "Construct an initial [State] from 8 bits of noise and a specific increment for updating",
          "is_a": "value",
          "name": "seed8Variant",
          "type_annotation": "U8, U8 -> State U8"
        },
        {
          "description": "Construct an initial [State] from 16 bits of noise",
          "is_a": "value",
          "name": "seed16",
          "type_annotation": "U16 -> State U16"
        },
        {
          "description": "Construct an initial [State] from 16 bits of noise and a specific increment for updating",
          "is_a": "value",
          "name": "seed16Variant",
          "type_annotation": "U16, U16 -> State U16"
        },
        {
          "description": "Construct an initial [State] from 32 bits of noise",
          "is_a": "value",
          "name": "seed32",
          "type_annotation": "U32 -> State U32"
        },
        {
          "description": "Construct an initial [State] from 32 bits of noise and a specific increment for updating",
          "is_a": "value",
          "name": "seed32Variant",
          "type_annotation": "U32, U32 -> State U32"
        },
        {
          "description": "Generate a new [Generation] from an old [Generation]'s state",
          "is_a": "value",
          "name": "next",
          "type_annotation": "Generation uint *, Generator uint value -> Generation uint value"
        },
        {
          "description": "Generate a [Generation] from a state",
          "is_a": "value",
          "name": "step",
          "type_annotation": "State uint, Generator uint value -> Generation uint value"
        },
        {
          "description": "Construct a [Generator] for 32-bit unsigned integers between two boundaries (inclusive)\n\nThis is an alias for [i32].",
          "is_a": "value",
          "name": "int",
          "type_annotation": "I32, I32 -> Generator U32 I32"
        },
        {
          "description": "Construct a [Generator] for 8-bit signed integers between two boundaries (inclusive)",
          "is_a": "value",
          "name": "i8",
          "type_annotation": "I8, I8 -> Generator U8 I8"
        },
        {
          "description": "Construct a [Generator] for 16-bit signed integers between two boundaries (inclusive)",
          "is_a": "value",
          "name": "i16",
          "type_annotation": "I16, I16 -> Generator U16 I16"
        },
        {
          "description": "Construct a [Generator] for 32-bit signed integers between two boundaries (inclusive)",
          "is_a": "value",
          "name": "i32",
          "type_annotation": "I32, I32 -> Generator U32 I32"
        },
        {
          "description": "Construct a [Generator] for 8-bit unsigned integers between two boundaries (inclusive)",
          "is_a": "value",
          "name": "u8",
          "type_annotation": "U8, U8 -> Generator U8 U8"
        },
        {
          "description": "Construct a [Generator] for 16-bit unsigned integers between two boundaries (inclusive)",
          "is_a": "value",
          "name": "u16",
          "type_annotation": "U16, U16 -> Generator U16 U16"
        },
        {
          "description": "Construct a [Generator] for 32-bit unsigned integers between two boundaries (inclusive)",
          "is_a": "value",
          "name": "u32",
          "type_annotation": "U32, U32 -> Generator U32 U32"
        }
      ],
      "name": "Random"
    }
  ],
  "package_id": "jancvanb/roc-random",
  "source_code_url": "https://github.com/jancvanb/roc-random"
}
