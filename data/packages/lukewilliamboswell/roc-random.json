{
  "documentation_url": "https://lukewilliamboswell.github.io/roc-random/",
  "download_url": "https://github.com/lukewilliamboswell/roc-random/releases/download/0.4.0/Ai2KfHOqOYXZmwdHX3g3ytbOUjTmZQmy0G2R9NuPBP0.tar.br",
  "homepage_url": "https://github.com/lukewilliamboswell/roc-random",
  "modules": [
    {
      "definitions": [
        {
          "description": "A generator that produces pseudorandom `value`s using the PCG algorithm.\n\n```\nrgbGenerator : Generator { red: U8, green: U8, blue: U8 }\nrgbGenerator =\n    { Random.chain <-\n        red: Random.u8,\n        green: Random.u8,\n        blue: Random.u8,\n    }\n```",
          "is_a": "type",
          "name": "Generator",
          "type_annotation": null
        },
        {
          "description": "A pseudorandom value, paired with its [Generator]'s output state.\n\nThis is required to chain multiple calls together passing the updated state.",
          "is_a": "type",
          "name": "Generation",
          "type_annotation": null
        },
        {
          "description": "Internal state for Generators",
          "is_a": "type",
          "name": "State",
          "type_annotation": null
        },
        {
          "description": "Construct an initial \"seed\" [State] for [Generator]s",
          "is_a": "value",
          "name": "seed",
          "type_annotation": "U32 -> State"
        },
        {
          "description": "Construct a specific \"variant\" of a \"seed\" for more advanced use.\n\nA \"seed\" is an initial [State] for [Generator]s.\n\nA \"variant\" is a [State] that specifies a `c.updateIncrement` constant,\nto produce a sequence of internal `value`s that shares no consecutive pairs\nwith other variants of the same [State].\n\nOdd numbers are recommended for the update increment,\nto double the repetition period of sequences (by hitting odd values).",
          "is_a": "value",
          "name": "seedVariant",
          "type_annotation": "U32, U32 -> State"
        },
        {
          "description": "Generate a [Generation] from a state",
          "is_a": "value",
          "name": "step",
          "type_annotation": "State, Generator value -> Generation value"
        },
        {
          "description": "Generate a new [Generation] from an old [Generation]'s state",
          "is_a": "value",
          "name": "next",
          "type_annotation": "Generation *, Generator value -> Generation value"
        },
        {
          "description": "Create a [Generator] that always returns the same thing.",
          "is_a": "value",
          "name": "static",
          "type_annotation": "value -> Generator value"
        },
        {
          "description": "Map over the value of a [Generator].",
          "is_a": "value",
          "name": "map",
          "type_annotation": "Generator a, (a -> b) -> Generator b"
        },
        {
          "description": "Compose two [Generator]s into a single [Generator].\n\nThis works well with record builders:\n\n```\ndateGenerator =\n    { Random.chain <-\n        year: Random.int 1 2500,\n        month: Random.int 1 12,\n        day: Random.int 1 31,\n    }\n```",
          "is_a": "value",
          "name": "chain",
          "type_annotation": "Generator a, Generator b, (a, b -> c) -> Generator c"
        },
        {
          "description": "Generate a list of random values.\n```\ngenerate10RandomU8s : Generator (List U8)\ngenerate10RandomU8s =\n    Random.list Random.u8 10\n```",
          "is_a": "value",
          "name": "list",
          "type_annotation": "Generator a, Int * -> Generator (List a)"
        },
        {
          "description": "Construct a [Generator] for 8-bit unsigned integers",
          "is_a": "value",
          "name": "u8",
          "type_annotation": "Generator U8"
        },
        {
          "description": "Construct a [Generator] for 8-bit unsigned integers between two boundaries (inclusive)",
          "is_a": "value",
          "name": "boundedU8",
          "type_annotation": "U8, U8 -> Generator U8"
        },
        {
          "description": "Construct a [Generator] for 8-bit signed integers",
          "is_a": "value",
          "name": "i8",
          "type_annotation": "Generator I8"
        },
        {
          "description": "Construct a [Generator] for 8-bit signed integers between two boundaries (inclusive)",
          "is_a": "value",
          "name": "boundedI8",
          "type_annotation": "I8, I8 -> Generator I8"
        },
        {
          "description": "Construct a [Generator] for 16-bit unsigned integers",
          "is_a": "value",
          "name": "u16",
          "type_annotation": "Generator U16"
        },
        {
          "description": "Construct a [Generator] for 16-bit unsigned integers between two boundaries (inclusive)",
          "is_a": "value",
          "name": "boundedU16",
          "type_annotation": "U16, U16 -> Generator U16"
        },
        {
          "description": "Construct a [Generator] for 16-bit signed integers",
          "is_a": "value",
          "name": "i16",
          "type_annotation": "Generator I16"
        },
        {
          "description": "Construct a [Generator] for 16-bit signed integers between two boundaries (inclusive)",
          "is_a": "value",
          "name": "boundedI16",
          "type_annotation": "I16, I16 -> Generator I16"
        },
        {
          "description": "Construct a [Generator] for 32-bit unsigned integers",
          "is_a": "value",
          "name": "u32",
          "type_annotation": "Generator U32"
        },
        {
          "description": "Construct a [Generator] for 32-bit unsigned integers between two boundaries (inclusive)",
          "is_a": "value",
          "name": "boundedU32",
          "type_annotation": "U32, U32 -> Generator U32"
        },
        {
          "description": "Construct a [Generator] for 32-bit signed integers",
          "is_a": "value",
          "name": "i32",
          "type_annotation": "Generator I32"
        },
        {
          "description": "Construct a [Generator] for 32-bit signed integers between two boundaries (inclusive)",
          "is_a": "value",
          "name": "boundedI32",
          "type_annotation": "I32, I32 -> Generator I32"
        }
      ],
      "name": "Random"
    }
  ],
  "package_id": "lukewilliamboswell/roc-random",
  "source_code_url": "https://github.com/lukewilliamboswell/roc-random"
}
