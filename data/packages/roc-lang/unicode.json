{
  "documentation_url": "https://roc-lang.github.io/unicode/",
  "download_url": "https://github.com/roc-lang/unicode/releases/download/0.2.0/odvSckHK9LxWLbsrPmo2s6aQ3bn7C3PALyv0ZI1gAu0.tar.br",
  "homepage_url": "https://github.com/roc-lang/unicode",
  "modules": [
    {
      "definitions": [
        {
          "description": "A [Unicode code point](http://www.unicode.org/glossary/#code_point).",
          "is_a": "type",
          "name": "CodePoint",
          "type_annotation": null
        },
        {
          "description": "Converts a [CodePoint] to its underlying [Unicode code point](http://www.unicode.org/glossary/#code_point)\ninteger representation.",
          "is_a": "value",
          "name": "toU32",
          "type_annotation": "CodePoint -> U32"
        },
        {
          "description": "Converts a [U32] to a [CodePoint] by verifying that it is a valid [Unicode code point](http://www.unicode.org/glossary/#code_point)\n(that is, it's between `0` and `0x10FFFF`).",
          "is_a": "value",
          "name": "fromU32",
          "type_annotation": "U32 -> Result CodePoint [InvalidCodePoint]"
        },
        {
          "description": "Returns false if this is [isHighSurrogate] or [isLowSurrogate]",
          "is_a": "value",
          "name": "isValidScalar",
          "type_annotation": "CodePoint -> Bool"
        },
        {
          "description": "Returns true if this is a [high-surrogate code point](http://www.unicode.org/glossary/#high_surrogate_code_point)\nfrom U+D800 to U+DBFF",
          "is_a": "value",
          "name": "isHighSurrogate",
          "type_annotation": "CodePoint -> Bool"
        },
        {
          "description": "Returns true if this is a [low-surrogate code point](https://www.unicode.org/glossary/#low_surrogate_code_point)\nfrom U+DC00 to U+DFFF",
          "is_a": "value",
          "name": "isLowSurrogate",
          "type_annotation": "CodePoint -> Bool"
        },
        {
          "description": "Zig docs: bytes the UTF-8 representation would require\nfor the given codepoint.",
          "is_a": "value",
          "name": "utf8Len",
          "type_annotation": "CodePoint -> Result U8 [InvalidCodePoint]"
        },
        {
          "description": "Encode a Scalar as UTF-8 bytes and append those bytes to an existing list of UTF-8 bytes.",
          "is_a": "value",
          "name": "appendUtf8",
          "type_annotation": "List U8, CodePoint -> List U8"
        },
        {
          "description": "The number of UTF-8 bytes it takes to represent this Scalar.",
          "is_a": "value",
          "name": "countUtf8Bytes",
          "type_annotation": "CodePoint -> U8"
        },
        {
          "description": null,
          "is_a": "type",
          "name": "Utf8ParseErr",
          "type_annotation": "[ OverlongEncoding, ExpectedContinuation, EncodesSurrogateHalf, InvalidUtf8, ListWasEmpty, CodepointTooLarge ]"
        },
        {
          "description": "Parses a list of bytes into a list of code points",
          "is_a": "value",
          "name": "parseUtf8",
          "type_annotation": "List U8 -> Result (List CodePoint) Utf8ParseErr"
        },
        {
          "description": "Parses the first code point found in a list of bytes encoded as UTF-8. Returns `ListWasEmpty`\nif the list was empty, or `InvalidUtf8` if the bytes were not valid UTF-8.",
          "is_a": "value",
          "name": "parsePartialUtf8",
          "type_annotation": "List U8 -> Result { codePoint : CodePoint, bytesParsed : U64 } Utf8ParseErr"
        },
        {
          "description": null,
          "is_a": "value",
          "name": "toStr",
          "type_annotation": "List CodePoint -> Result Str [BadUtf8]"
        },
        {
          "description": "Computes the \"east asian width\" property for a given code point.\nSee https://www.unicode.org/Public/15.1.0/ucd/EastAsianWidth.txt",
          "is_a": "value",
          "name": "eastAsianWidthProperty",
          "type_annotation": "CodePoint -> EastAsianProperty"
        },
        {
          "description": "Computes the visual width of a code point as assigned by the Unicode Character Database",
          "is_a": "value",
          "name": "visualWidth",
          "type_annotation": "CodePoint -> U32"
        }
      ],
      "name": "CodePoint"
    },
    {
      "definitions": [
        {
          "description": "Extended Grapheme Cluster",
          "is_a": "type",
          "name": "Grapheme",
          "type_annotation": null
        },
        {
          "description": "Split a string into extended grapheme clusters",
          "is_a": "value",
          "name": "split",
          "type_annotation": "Str -> Result (List Str) Utf8ParseErr"
        }
      ],
      "name": "Grapheme"
    }
  ],
  "package_id": "roc-lang/unicode",
  "source_code_url": "https://github.com/roc-lang/unicode"
}
