{
  "documentation_url": "https://phagenlocher.github.io/roc-color/",
  "download_url": "https://github.com/phagenlocher/roc-color/releases/download/v0.1.1/pvewROufEfmb1pVzceW6n8QuioZH0VcSVn9fe--6dXg.tar.br",
  "homepage_url": "https://github.com/phagenlocher/roc-color",
  "modules": [
    {
      "definitions": [
        {
          "description": "Type that represents a color code for formatting.\nUse `ansi`, `color256bit` or `rgb` to construct it.",
          "is_a": "type",
          "name": "Color",
          "type_annotation": null
        },
        {
          "description": "Display attributes for SGR.\n\nWhen using `formatWith` you should use the lowercase variants exported\nby this module (see the documentation for `formatWith`).\n\nPlease note that `Italic` is not officially specified for SGR but many\nterminals support it. `Bold` is sometimes interpreted as \"bright\".\nMost terminals however format the text as bold.",
          "is_a": "type",
          "name": "DisplayAttribute",
          "type_annotation": "[ Reset, Bold, Dim, Italic, Underscore, Blink, Reverse, Hidden ]"
        },
        {
          "description": "SGR colors.\n\nThese colors are most likely to work with most terminals. Use `ansi` to\nturn them into a `Color` or use the already exported constants provided\nby this module.",
          "is_a": "type",
          "name": "AnsiColor",
          "type_annotation": "[ Black, Blue, Cyan, Green, Magenta, Red, White, Yellow ]"
        },
        {
          "description": "Wraps the string argument with a SGR that reflects the attributes and\ncolors in the input list and a reset for SGR after it. When printing\nthe resulting string to the terminal, it will be styled acoordingly\nassuming the terminal supports the chosen display attributes and colors.\n\n## Usage\nYou are meant to import this function and your desired attributes by\n`exposing` them, so the syntax is less cluttered.\n```\nimport color.Color exposing [formatWith, bold, italic, underscore, rgb, blue, whiteBg, foreground]\n\nmain =\n    line1 = formatWith [bold, blue, whiteBg] \"foobar\"\n    Stdout.line! \"My first text: $(line1)\"\n    line2 = formatWith [italic, underscore, foreground (rgb 25 233 143)] \"barfoo\"\n    Stdout.line! \"My second text: $(line2)\"\n```\nAssuming that at most a single `Foreground` and `Background` color is present\nin the list, the order of elements is not relevant. If multiple `Foreground`\nand/or `Background` values are present, it's undefined which and if colors\nwill be chosen.",
          "is_a": "value",
          "name": "formatWith",
          "type_annotation": "List [ Display DisplayAttribute, Foreground Color, Background Color ], Str -> Str"
        },
        {
          "description": "Generate a single SGR with the attributes given in a record of optional values.\nThe type of this function is:\n```\nselectGraphicRendition : { attrs ? List DisplayAttribute, bgColor ? Color, fgColor ? Color } -> Str\n```",
          "is_a": "value",
          "name": "selectGraphicRendition",
          "type_annotation": null
        },
        {
          "description": "String to reset the SGR.\nThis is equivalent to `selectGraphicRendition {attrs: [Reset]}`.",
          "is_a": "value",
          "name": "resetGraphicRendition",
          "type_annotation": "Str"
        },
        {
          "description": "Turns an `AnsiColor` into a `Color`. It's most likely that your targeted\nterminals support this color type.",
          "is_a": "value",
          "name": "ansi",
          "type_annotation": "AnsiColor -> Color"
        },
        {
          "description": "Turns a byte into a 256 bit color. Please note that this color type might\nnot be supported by your targeted terminals. If you don't need fine-grained\ncontrol of colors you should stick with `AnsiColor` values.",
          "is_a": "value",
          "name": "color256bit",
          "type_annotation": "U8 -> Color"
        },
        {
          "description": "Turns three bytes into a Truecolor RGB color. Please note that this color\ntype might not be supported by your targeted terminals. If you don't need\nfine-grained control of colors you should stick with `AnsiColor` values.",
          "is_a": "value",
          "name": "rgb",
          "type_annotation": "U8, U8, U8 -> Color"
        },
        {
          "description": "Interprets a [hexadecimal color](https://en.wikipedia.org/wiki/Web_colors)\nas a Truecolor RGB color. If the supplied string fails to parse, the color\nwill not influence formatting.\n\n## Format\n`#rrggbb` or `#rgb`\n\nThe string must contain 3 bytes in hexadecimal format (00-FF).\nAlternatively, the string can only consist of three characters (0-F) that\ndescribe the individual bytes to be made up of the specified character\ntwice, meaning that `F` turns into `FF` and `5` turns into `55`.\nLetters can be uppercase or lowercase. The string can be prefixed with an\noptional `#`.\n\n## Examples\n`\"#000\"` results in black color.\n`\"#1E90FF\"` is an RGB value of (30, 144, 255).",
          "is_a": "value",
          "name": "rgbHex",
          "type_annotation": "Str -> Color"
        },
        {
          "description": "Marks a `Color` to be used for the foreground (the text color).",
          "is_a": "value",
          "name": "foreground",
          "type_annotation": "Color -> [Foreground Color]"
        },
        {
          "description": "Marks a `Color` to be used for the background.",
          "is_a": "value",
          "name": "background",
          "type_annotation": "Color -> [Background Color]"
        },
        {
          "description": null,
          "is_a": "value",
          "name": "black",
          "type_annotation": null
        },
        {
          "description": null,
          "is_a": "value",
          "name": "blue",
          "type_annotation": null
        },
        {
          "description": null,
          "is_a": "value",
          "name": "cyan",
          "type_annotation": null
        },
        {
          "description": null,
          "is_a": "value",
          "name": "green",
          "type_annotation": null
        },
        {
          "description": null,
          "is_a": "value",
          "name": "magenta",
          "type_annotation": null
        },
        {
          "description": null,
          "is_a": "value",
          "name": "red",
          "type_annotation": null
        },
        {
          "description": null,
          "is_a": "value",
          "name": "white",
          "type_annotation": null
        },
        {
          "description": null,
          "is_a": "value",
          "name": "yellow",
          "type_annotation": null
        },
        {
          "description": null,
          "is_a": "value",
          "name": "blackBg",
          "type_annotation": null
        },
        {
          "description": null,
          "is_a": "value",
          "name": "blueBg",
          "type_annotation": null
        },
        {
          "description": null,
          "is_a": "value",
          "name": "cyanBg",
          "type_annotation": null
        },
        {
          "description": null,
          "is_a": "value",
          "name": "greenBg",
          "type_annotation": null
        },
        {
          "description": null,
          "is_a": "value",
          "name": "magentaBg",
          "type_annotation": null
        },
        {
          "description": null,
          "is_a": "value",
          "name": "redBg",
          "type_annotation": null
        },
        {
          "description": null,
          "is_a": "value",
          "name": "whiteBg",
          "type_annotation": null
        },
        {
          "description": null,
          "is_a": "value",
          "name": "yellowBg",
          "type_annotation": null
        },
        {
          "description": null,
          "is_a": "value",
          "name": "blink",
          "type_annotation": null
        },
        {
          "description": null,
          "is_a": "value",
          "name": "bold",
          "type_annotation": null
        },
        {
          "description": null,
          "is_a": "value",
          "name": "italic",
          "type_annotation": null
        },
        {
          "description": null,
          "is_a": "value",
          "name": "dim",
          "type_annotation": null
        },
        {
          "description": null,
          "is_a": "value",
          "name": "hidden",
          "type_annotation": null
        },
        {
          "description": null,
          "is_a": "value",
          "name": "reset",
          "type_annotation": null
        },
        {
          "description": null,
          "is_a": "value",
          "name": "reverse",
          "type_annotation": null
        },
        {
          "description": null,
          "is_a": "value",
          "name": "underscore",
          "type_annotation": null
        }
      ],
      "name": "Color"
    }
  ],
  "package_id": "phagenlocher/roc-color",
  "source_code_url": "https://github.com/phagenlocher/roc-color"
}
